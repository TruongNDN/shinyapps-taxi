lapply(split(mtcars$hp, mtcars$cyl), mean)
lapply(split(mtcars$hp, mtcars$cyl), mean)$4
lapply(split(mtcars$hp, mtcars$cyl), mean)$`4`
mean_of_hp_by_cyl = lapply(split(mtcars$hp, mtcars$cyl), mean)
abs(mean_of_hp_by_cyl$`8` - mean_of_hp_by_cyl$`4`)
debug(ls)
ls
ls
ls
ls
ls()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
help("rpois")
help("set.seed")
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
x1 <- 1
x2 <- 2
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
file <- read.csv(directory)
file
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean('data/001.csv')
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
file <- read.csv(directory)
file
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean('data/001.csv')
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
file <- read.csv(directory)
file
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean('data/001.csv', 'r')
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
file <- read.csv(directory)
file
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean('./data/001.csv', 'r')
getpwd()
getwd()
x <- 1:20
names(x)
dimnames(x)
dim(x)
class(x)
length(x)
attributes(x)
x <- 5
class(x)
character
numeric (real numbers)
integer
complex
logical (True/False)
x <- list(1, "a", TRUE, 1 + 4i) ## creating list
x
x[[1]]
x[[[1]]]
x[1]
help lm
lm help
help(lm)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
help(table)
unclass(x)
help("unclass")
help(unclass)
help("read.table")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
search()
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
library(swirl)
swirl()
class(plants)
View(plants)
View(plants)
summary(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, nrow=10)
head(plants, 10)
tail(plants, 15)
summary(plants)
View(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100)
sample(c(0, 1), 100, prob = c(0.3, 0.7))
sample(c(0, 1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips <- sample(c(0, 1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
View(my_pois)
my_pois
cm <- colMeans(my_pois)
hist(cm)
?melt
install.packages("reshape2")
?melt
library(reshape2)
?melt
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t2)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17,1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data("cars")
data(cars)
?cars
head(cars)
View(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plots(cars, pch = 2)
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
head(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, mtcars)
View(mtcars)
hist(mtcars$mpg)
exit
exit()
q()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tabl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_ar)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
my_data <- read.csv("~/Desktop/airquality.csv")
head(my_data, 2)
tail(my_data, 2)
cran2 <- select(cran, size:ip_id)
cran2
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
summarize(cran, avg_bytes = mean(size))
install.packages("rattle")
install.packages("RGtk2")
install.packages('RGtk2')
install.packages("rattle")
install.packages("RColorBrewer")
install.packages("rpart.plot")
install.packages("randomForest")
library(manipulate)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu) {}
library(manipulate)
> myHist <- function(mu) {
+ hist(galton$child, col="blue", breaks=100)
+ lines(c(mu, mu), c(0, 150), col="red", lwd=5)
+ mse <- mean((galton$child - mu)^2)
+ text(63, 150, paste("mu = ", mu))
+ text(63, 140, paste("MSE = ", round(mse, 2)))
+ }
> manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
source('~/Desktop/hello.R', echo=TRUE)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
source('~/Desktop/swirl_courses-master/Statistical_Inference/Asymptotics/PoisDemo.R', echo=TRUE)
library(ggplot2)
source('~/Desktop/swirl_courses-master/Statistical_Inference/Asymptotics/PoisDemo.R', echo=TRUE)
source('~/Desktop/swirl_courses-master/Statistical_Inference/Asymptotics/PoisDemoImpr.R', echo=TRUE)
library(ggplot2)
g1 <- sleep$extra[1 : 10]
g2 <- sleep$extra[11 : 20]
difference <- g2-g1
s <- sd(difference)
s
s
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
mn <- mean(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
source('~/Desktop/swirl_courses-master/Statistical_Inference/T_Confidence_Intervals/plot4Ttests.R', echo=TRUE)
source('~/Desktop/swirl_courses-master/Statistical_Inference/T_Confidence_Intervals/show4calls.R', echo=TRUE)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
myplot2(20)
qt(0.975,2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference <- g1 - g2
difference <- g2 - g1
mean(difference)
s <- sd(difference)
t.test(difference)$conf.int
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
a
x
n_x
sp <- 7*15.34^2 + 20*18.23^2
sp
ns <- 8+21-2
ns
sp <- sqrt(sp/ns)
sp
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sp
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
num
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
den
mydf <- num/den
mydf
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
outlook temperature humidity wind playtennis
sunny hot high FALSE no
sunny hot high TRUE no
overcast hot high FALSE yes
rainy mild high FALSE yes
rainy cool normal FALSE yes
rainy cool normal TRUE no
overcast cool normal TRUE yes
sunny mild high FALSE no
sunny cool normal FALSE yes
rainy mild normal FALSE yes
sunny mild normal TRUE yes
overcast mild high TRUE yes
overcast hot normal FALSE yes
rainy mild high TRUE no
from sklearn import datasets
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
10/sqrt(100)
2
(32-30)/(10/sqrt(16))
15
qt(0.95, 15)
dim(fs)
t.test(fs$sheight-fs$fheight)
run 11.7885 *
| sd(fs$sheight-fs$fheight)/sqrt(1078)
run 11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0.00390625
mybin[8]
mybin[7]
7
8
library(swirl)
swirl()
pt(2.5, 15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail=FALSE)
library(swirl)
swirl()
head(pValues)
sum(pValues < 0.05)
sum(pValues < 0.05)
SOME ASPECTS
OF STATISTICAL
MACHINE LEARNING
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
table(pValues2 < 0.05, trueStatus)
24/500
24/500
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
sum(1\:6)/6
sum(1:6)/6
g2
print(g2)
head(sh)
nh
median(mpledMedians)
median(resampledMedians)
median(sh)
plants <- read.csv("~/Desktop/project/plants.csv", encoding="UTF8")
View(plants)
set.seed(7)
library(mlbench)
install.packages("mlbench")
library(mlbench)
install.packages("caret")
library(caret)
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
install.packages('libcurl')
install.packages("devtools")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='ongxuanhong', token='C2DAF9BCF3E4338D0BF748D706CB80AE', secret='0BCSp4gjBHzfPQOg5630ICrpnq8rlOgl1Jy7qyvh')
setwd("~/Desktop/shinnyapps-demo")
library(shiny)
runApp()
library(rsconnect)
deployApp()
install.packages("rsconnect")
library(shinyapps)
pps::deployApp()
pps::deployApp("./")
pps::deployApp("~/Desktop/shinnyapps-demo/")
install.packages("pps")
pps::deployApp("./")
pps::deployApp("~/Desktop/shinnyapps-demo/")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('https://github.com/ongxuanhong/shinnyapps-demo')
devtools::install_github('ongxuanhong/shinnyapps-demo')
library(rsconnect)
shinyapps::setAccountInfo(name='ongxuanhong', token='C2DAF9BCF3E4338D0BF748D706CB80AE', secret='0BCSp4gjBHzfPQOg5630ICrpnq8rlOgl1Jy7qyvh')
library(shinyapps)
shinyapps::deployApp("~/Desktop/shinnyapps-demo/")
setwd("~/Desktop/shinnyapps-taxi")
shiny::runApp()
library(shinyapps)
shinyapps::deployApp("~/Desktop/shinnyapps-taxi/")
